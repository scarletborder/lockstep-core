// request.proto
syntax = "proto3";

import "google/protobuf/empty.proto";


// 定义包名，这会影响 Go 和其他语言的命名空间
package messages;

// 告诉 Go 生成器将文件放在当前目录(./)，并且包名是 messages
option go_package = "./;messages";

// 即时性消息
// http 请求和响应

// 列出房间的响应消息
// 包含所有可用房间的ID列表
message ListRoomsResponse {
  repeated uint32 rooms = 1; // 房间ID列表，每个ID是一个无符号32位整数
}

// 创建房间的请求消息
// 客户端发送此消息来创建一个新的房间
message CreateRoomRequest {
  string name = 1; // 房间名称，用于标识房间
  string key = 2;  // 房间密钥，用于房间访问控制
}

// 创建房间的响应消息
// 服务器返回新创建房间的ID
message CreateRoomResponse {
  uint32 room_id = 1; // 新创建房间的唯一ID
}

// 通用错误响应消息
// 用于在请求失败时返回错误信息
message ErrorResponse {
  string error = 1; // 错误描述信息
}

// Deprecated: 使用路径参数传参，并使用原生http请求+upgrade来达到长连接效果
// 通过RPC加入房间的请求消息
// 虽然主要通过查询参数传递，但定义消息以保持一致性
// message JoinRoomRequest {
//   uint32 room_id = 1; // 要加入的房间ID
//   string key = 2;     // 可选的房间密钥，用于验证访问权限
// }

// 健康检查的响应消息
// 提供服务器状态和可用端点信息
message HealthCheckResponse {
  string status = 1;   // 服务器状态，通常为"ok"
  string message = 2;  // 状态消息描述
  repeated uint32 hash = 3;     // TLS证书的SHA256哈希值，用于验证
}


// 服务定义
// 定义 Lockstep 服务的 RPC 方法
service LockstepService {
  // 列出所有房间
  // 返回包含所有可用房间ID的响应
  rpc ListRooms(google.protobuf.Empty) returns (ListRoomsResponse);

  // 创建新房间
  // 接受房间名称和密钥，返回新创建房间的ID
  rpc CreateRoom(CreateRoomRequest) returns (CreateRoomResponse);

  // 通过双向流加入房间
  // 接受房间ID和可选密钥，升级到WebTransport连接
  // 此方法请使用原生http库实现
  // rpc JoinRoomRPC(JoinRoomRequest) returns (google.protobuf.Empty);

  // 健康检查
  // 返回服务器状态和可用端点信息
  rpc HealthCheck(google.protobuf.Empty) returns (HealthCheckResponse);
}
