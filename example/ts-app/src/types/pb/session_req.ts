// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "session_req.proto" (package "messages", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * 在长连接Session过程中，用户的所有可能请求
 * 因为客户端发送的消息会被统一的后端ws handler解析
 * 再根据后端room的状态进行分支处理
 *
 * @generated from protobuf message messages.SessionRequest
 */
export interface SessionRequest {
    /**
     * oneof 确保一个 Request 消息实例中，只有一个字段能被设置
     *
     * @generated from protobuf oneof: payload
     */
    payload: {
        oneofKind: "inLobby";
        /**
         * STAGE_InLobby
         *
         * @generated from protobuf field: messages.RequestInLobby in_lobby = 1
         */
        inLobby: RequestInLobby;
    } | {
        oneofKind: "toPreparing";
        /**
         * @generated from protobuf field: messages.RequestToPreparing to_preparing = 2
         */
        toPreparing: RequestToPreparing;
    } | {
        oneofKind: "ready";
        /**
         * STAGE_Preparing
         *
         * @generated from protobuf field: messages.RequestReady ready = 3
         */
        ready: RequestReady;
    } | {
        oneofKind: "toInLobby";
        /**
         * @generated from protobuf field: messages.RequestToInLobby to_in_lobby = 4
         */
        toInLobby: RequestToInLobby;
    } | {
        oneofKind: "loaded";
        /**
         * STAGE_Loading
         *
         * @generated from protobuf field: messages.RequestLoaded loaded = 5
         */
        loaded: RequestLoaded;
    } | {
        oneofKind: "inGameFrames";
        /**
         * STAGE_InGame
         *
         * @generated from protobuf field: messages.RequestInGameFrames in_game_frames = 6
         */
        inGameFrames: RequestInGameFrames;
    } | {
        oneofKind: "other";
        /**
         * @generated from protobuf field: messages.RequestOther other = 7
         */
        other: RequestOther;
    } | {
        oneofKind: "endGame";
        /**
         * @generated from protobuf field: messages.RequestEndGame end_game = 8
         */
        endGame: RequestEndGame;
    } | {
        oneofKind: "postGameData";
        /**
         * STAGE_PostGame
         *
         * @generated from protobuf field: messages.RequestPostGameData post_game_data = 9
         */
        postGameData: RequestPostGameData;
    } | {
        oneofKind: undefined;
    };
}
// InLobby 大厅中

/**
 * RequestInLobby 大厅中的请求，透传给游戏世界
 *
 * @generated from protobuf message messages.RequestInLobby
 */
export interface RequestInLobby {
    /**
     * 携带的bytes，框架将直接传给游戏世界处理
     *
     * @generated from protobuf field: bytes data = 1
     */
    data: Uint8Array;
}
/**
 * @generated from protobuf message messages.RequestToPreparing
 */
export interface RequestToPreparing {
    /**
     * 携带的bytes，框架将直接传给游戏世界处理
     * 例如关卡数据等
     *
     * @generated from protobuf field: bytes data = 1
     */
    data: Uint8Array;
}
// Preparing 准备阶段

/**
 * Ready 表示某个客户端在选卡界面切换准备就绪
 *
 * @generated from protobuf message messages.RequestReady
 */
export interface RequestReady {
    /**
     * @generated from protobuf field: bool isReady = 1
     */
    isReady: boolean;
    /**
     * 携带的bytes，例如装备数据
     *
     * @generated from protobuf field: optional bytes data = 2
     */
    data?: Uint8Array;
}
/**
 * 请求返回大厅
 *
 * @generated from protobuf message messages.RequestToInLobby
 */
export interface RequestToInLobby {
    /**
     * 携带的bytes，框架将直接传给游戏世界处理
     *
     * @generated from protobuf field: bytes data = 1
     */
    data: Uint8Array;
}
/**
 * Loading 加载阶段
 *
 * @generated from protobuf message messages.RequestLoaded
 */
export interface RequestLoaded {
    /**
     * @generated from protobuf field: bool isLoaded = 1
     */
    isLoaded: boolean;
}
// InGame 游戏中

/**
 * RequestBlank 用于心跳并携带具体用户请求
 *
 * @generated from protobuf message messages.RequestInGameFrames
 */
export interface RequestInGameFrames {
    /**
     * 本数据包所作操作是为了步进到的帧ID
     *
     * @generated from protobuf field: uint32 frame_id = 1
     */
    frameId: number;
    /**
     * 客户端确认服务端上一次的“步进到”的帧ID
     *
     * @generated from protobuf field: uint32 ack_frame_id = 2
     */
    ackFrameId: number;
    /**
     * 携带的bytes，框架将直接传给游戏世界处理
     * 如果为空，则说明为没有操作空白帧
     *
     * @generated from protobuf field: optional bytes data = 3
     */
    data?: Uint8Array;
}
/**
 * 申请结束游戏
 * 如果同意则跳转到 PostGame 阶段
 *
 * @generated from protobuf message messages.RequestEndGame
 */
export interface RequestEndGame {
    /**
     * 游戏结束状态码
     *
     * @generated from protobuf field: uint32 StatusCode = 1
     */
    statusCode: number;
    /**
     * 携带的bytes，框架将直接传给游戏世界处理
     *
     * @generated from protobuf field: optional bytes data = 2
     */
    data?: Uint8Array;
}
/**
 * PostGame 游戏结束后的数据
 * 可能用于发送战绩数据等信息
 *
 * @generated from protobuf message messages.RequestPostGameData
 */
export interface RequestPostGameData {
    /**
     * 携带的bytes，框架将直接传给游戏世界处理
     *
     * @generated from protobuf field: optional bytes data = 1
     */
    data?: Uint8Array;
}
/**
 * 请求，例如聊天信息
 *
 * @generated from protobuf message messages.RequestOther
 */
export interface RequestOther {
    /**
     * 携带的bytes，框架将直接传给游戏世界处理
     *
     * @generated from protobuf field: bytes data = 1
     */
    data: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class SessionRequest$Type extends MessageType<SessionRequest> {
    constructor() {
        super("messages.SessionRequest", [
            { no: 1, name: "in_lobby", kind: "message", oneof: "payload", T: () => RequestInLobby },
            { no: 2, name: "to_preparing", kind: "message", oneof: "payload", T: () => RequestToPreparing },
            { no: 3, name: "ready", kind: "message", oneof: "payload", T: () => RequestReady },
            { no: 4, name: "to_in_lobby", kind: "message", oneof: "payload", T: () => RequestToInLobby },
            { no: 5, name: "loaded", kind: "message", oneof: "payload", T: () => RequestLoaded },
            { no: 6, name: "in_game_frames", kind: "message", oneof: "payload", T: () => RequestInGameFrames },
            { no: 7, name: "other", kind: "message", oneof: "payload", T: () => RequestOther },
            { no: 8, name: "end_game", kind: "message", oneof: "payload", T: () => RequestEndGame },
            { no: 9, name: "post_game_data", kind: "message", oneof: "payload", T: () => RequestPostGameData }
        ]);
    }
    create(value?: PartialMessage<SessionRequest>): SessionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.payload = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<SessionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SessionRequest): SessionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* messages.RequestInLobby in_lobby */ 1:
                    message.payload = {
                        oneofKind: "inLobby",
                        inLobby: RequestInLobby.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).inLobby)
                    };
                    break;
                case /* messages.RequestToPreparing to_preparing */ 2:
                    message.payload = {
                        oneofKind: "toPreparing",
                        toPreparing: RequestToPreparing.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).toPreparing)
                    };
                    break;
                case /* messages.RequestReady ready */ 3:
                    message.payload = {
                        oneofKind: "ready",
                        ready: RequestReady.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).ready)
                    };
                    break;
                case /* messages.RequestToInLobby to_in_lobby */ 4:
                    message.payload = {
                        oneofKind: "toInLobby",
                        toInLobby: RequestToInLobby.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).toInLobby)
                    };
                    break;
                case /* messages.RequestLoaded loaded */ 5:
                    message.payload = {
                        oneofKind: "loaded",
                        loaded: RequestLoaded.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).loaded)
                    };
                    break;
                case /* messages.RequestInGameFrames in_game_frames */ 6:
                    message.payload = {
                        oneofKind: "inGameFrames",
                        inGameFrames: RequestInGameFrames.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).inGameFrames)
                    };
                    break;
                case /* messages.RequestOther other */ 7:
                    message.payload = {
                        oneofKind: "other",
                        other: RequestOther.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).other)
                    };
                    break;
                case /* messages.RequestEndGame end_game */ 8:
                    message.payload = {
                        oneofKind: "endGame",
                        endGame: RequestEndGame.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).endGame)
                    };
                    break;
                case /* messages.RequestPostGameData post_game_data */ 9:
                    message.payload = {
                        oneofKind: "postGameData",
                        postGameData: RequestPostGameData.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).postGameData)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SessionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* messages.RequestInLobby in_lobby = 1; */
        if (message.payload.oneofKind === "inLobby")
            RequestInLobby.internalBinaryWrite(message.payload.inLobby, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* messages.RequestToPreparing to_preparing = 2; */
        if (message.payload.oneofKind === "toPreparing")
            RequestToPreparing.internalBinaryWrite(message.payload.toPreparing, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* messages.RequestReady ready = 3; */
        if (message.payload.oneofKind === "ready")
            RequestReady.internalBinaryWrite(message.payload.ready, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* messages.RequestToInLobby to_in_lobby = 4; */
        if (message.payload.oneofKind === "toInLobby")
            RequestToInLobby.internalBinaryWrite(message.payload.toInLobby, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* messages.RequestLoaded loaded = 5; */
        if (message.payload.oneofKind === "loaded")
            RequestLoaded.internalBinaryWrite(message.payload.loaded, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* messages.RequestInGameFrames in_game_frames = 6; */
        if (message.payload.oneofKind === "inGameFrames")
            RequestInGameFrames.internalBinaryWrite(message.payload.inGameFrames, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* messages.RequestOther other = 7; */
        if (message.payload.oneofKind === "other")
            RequestOther.internalBinaryWrite(message.payload.other, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* messages.RequestEndGame end_game = 8; */
        if (message.payload.oneofKind === "endGame")
            RequestEndGame.internalBinaryWrite(message.payload.endGame, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* messages.RequestPostGameData post_game_data = 9; */
        if (message.payload.oneofKind === "postGameData")
            RequestPostGameData.internalBinaryWrite(message.payload.postGameData, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.SessionRequest
 */
export const SessionRequest = new SessionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestInLobby$Type extends MessageType<RequestInLobby> {
    constructor() {
        super("messages.RequestInLobby", [
            { no: 1, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<RequestInLobby>): RequestInLobby {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<RequestInLobby>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestInLobby): RequestInLobby {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes data */ 1:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestInLobby, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes data = 1; */
        if (message.data.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.RequestInLobby
 */
export const RequestInLobby = new RequestInLobby$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestToPreparing$Type extends MessageType<RequestToPreparing> {
    constructor() {
        super("messages.RequestToPreparing", [
            { no: 1, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<RequestToPreparing>): RequestToPreparing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<RequestToPreparing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestToPreparing): RequestToPreparing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes data */ 1:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestToPreparing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes data = 1; */
        if (message.data.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.RequestToPreparing
 */
export const RequestToPreparing = new RequestToPreparing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestReady$Type extends MessageType<RequestReady> {
    constructor() {
        super("messages.RequestReady", [
            { no: 1, name: "isReady", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "data", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<RequestReady>): RequestReady {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.isReady = false;
        if (value !== undefined)
            reflectionMergePartial<RequestReady>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestReady): RequestReady {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool isReady */ 1:
                    message.isReady = reader.bool();
                    break;
                case /* optional bytes data */ 2:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestReady, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool isReady = 1; */
        if (message.isReady !== false)
            writer.tag(1, WireType.Varint).bool(message.isReady);
        /* optional bytes data = 2; */
        if (message.data !== undefined)
            writer.tag(2, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.RequestReady
 */
export const RequestReady = new RequestReady$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestToInLobby$Type extends MessageType<RequestToInLobby> {
    constructor() {
        super("messages.RequestToInLobby", [
            { no: 1, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<RequestToInLobby>): RequestToInLobby {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<RequestToInLobby>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestToInLobby): RequestToInLobby {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes data */ 1:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestToInLobby, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes data = 1; */
        if (message.data.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.RequestToInLobby
 */
export const RequestToInLobby = new RequestToInLobby$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestLoaded$Type extends MessageType<RequestLoaded> {
    constructor() {
        super("messages.RequestLoaded", [
            { no: 1, name: "isLoaded", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RequestLoaded>): RequestLoaded {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.isLoaded = false;
        if (value !== undefined)
            reflectionMergePartial<RequestLoaded>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestLoaded): RequestLoaded {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool isLoaded */ 1:
                    message.isLoaded = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestLoaded, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool isLoaded = 1; */
        if (message.isLoaded !== false)
            writer.tag(1, WireType.Varint).bool(message.isLoaded);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.RequestLoaded
 */
export const RequestLoaded = new RequestLoaded$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestInGameFrames$Type extends MessageType<RequestInGameFrames> {
    constructor() {
        super("messages.RequestInGameFrames", [
            { no: 1, name: "frame_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "ack_frame_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "data", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<RequestInGameFrames>): RequestInGameFrames {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.frameId = 0;
        message.ackFrameId = 0;
        if (value !== undefined)
            reflectionMergePartial<RequestInGameFrames>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestInGameFrames): RequestInGameFrames {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 frame_id */ 1:
                    message.frameId = reader.uint32();
                    break;
                case /* uint32 ack_frame_id */ 2:
                    message.ackFrameId = reader.uint32();
                    break;
                case /* optional bytes data */ 3:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestInGameFrames, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 frame_id = 1; */
        if (message.frameId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.frameId);
        /* uint32 ack_frame_id = 2; */
        if (message.ackFrameId !== 0)
            writer.tag(2, WireType.Varint).uint32(message.ackFrameId);
        /* optional bytes data = 3; */
        if (message.data !== undefined)
            writer.tag(3, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.RequestInGameFrames
 */
export const RequestInGameFrames = new RequestInGameFrames$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestEndGame$Type extends MessageType<RequestEndGame> {
    constructor() {
        super("messages.RequestEndGame", [
            { no: 1, name: "StatusCode", kind: "scalar", jsonName: "StatusCode", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "data", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<RequestEndGame>): RequestEndGame {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.statusCode = 0;
        if (value !== undefined)
            reflectionMergePartial<RequestEndGame>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestEndGame): RequestEndGame {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 StatusCode */ 1:
                    message.statusCode = reader.uint32();
                    break;
                case /* optional bytes data */ 2:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestEndGame, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 StatusCode = 1; */
        if (message.statusCode !== 0)
            writer.tag(1, WireType.Varint).uint32(message.statusCode);
        /* optional bytes data = 2; */
        if (message.data !== undefined)
            writer.tag(2, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.RequestEndGame
 */
export const RequestEndGame = new RequestEndGame$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestPostGameData$Type extends MessageType<RequestPostGameData> {
    constructor() {
        super("messages.RequestPostGameData", [
            { no: 1, name: "data", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<RequestPostGameData>): RequestPostGameData {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RequestPostGameData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestPostGameData): RequestPostGameData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bytes data */ 1:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestPostGameData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bytes data = 1; */
        if (message.data !== undefined)
            writer.tag(1, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.RequestPostGameData
 */
export const RequestPostGameData = new RequestPostGameData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestOther$Type extends MessageType<RequestOther> {
    constructor() {
        super("messages.RequestOther", [
            { no: 1, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<RequestOther>): RequestOther {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<RequestOther>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestOther): RequestOther {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes data */ 1:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestOther, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes data = 1; */
        if (message.data.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.RequestOther
 */
export const RequestOther = new RequestOther$Type();
