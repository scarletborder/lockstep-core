// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "request.proto" (package "messages", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * 包装消息，包含所有可能的请求类型
 * 因为客户端发送的消息会被统一的后端ws handler解析
 * 再根据后端room的状态进行分支处理
 *
 * @generated from protobuf message messages.Request
 */
export interface Request {
    /**
     * oneof 确保一个 Request 消息实例中，只有一个字段能被设置
     *
     * @generated from protobuf oneof: payload
     */
    payload: {
        oneofKind: "chooseMap";
        /**
         * @generated from protobuf field: messages.RequestChooseMap choose_map = 6
         */
        chooseMap: RequestChooseMap;
    } | {
        oneofKind: "leaveChooseMap";
        /**
         * @generated from protobuf field: messages.RequestLeaveChooseMap leave_choose_map = 9
         */
        leaveChooseMap: RequestLeaveChooseMap;
    } | {
        oneofKind: "ready";
        /**
         * @generated from protobuf field: messages.RequestReady ready = 5
         */
        ready: RequestReady;
    } | {
        oneofKind: "loaded";
        /**
         * @generated from protobuf field: messages.RequestLoaded loaded = 8
         */
        loaded: RequestLoaded;
    } | {
        oneofKind: "blank";
        /**
         * @generated from protobuf field: messages.RequestBlank blank = 1
         */
        blank: RequestBlank;
    } | {
        oneofKind: "plant";
        /**
         * @generated from protobuf field: messages.RequestCardPlant plant = 2
         */
        plant: RequestCardPlant;
    } | {
        oneofKind: "removePlant";
        /**
         * @generated from protobuf field: messages.RequestRemovePlant remove_plant = 3
         */
        removePlant: RequestRemovePlant;
    } | {
        oneofKind: "starShards";
        /**
         * @generated from protobuf field: messages.RequestStarShards star_shards = 4
         */
        starShards: RequestStarShards;
    } | {
        oneofKind: "endGame";
        /**
         * @generated from protobuf field: messages.RequestEndGame end_game = 7
         */
        endGame: RequestEndGame;
    } | {
        oneofKind: undefined;
    };
}
// --- 以下是具体的消息定义，从你的 Go 代码翻译而来 ---

/**
 * RequestChooseMap 请求选择地图
 * 房主客户端在选择地图时发送此请求
 * 进入preparing阶段
 *
 * @generated from protobuf message messages.RequestChooseMap
 */
export interface RequestChooseMap {
    /**
     * @generated from protobuf field: uint32 chapter_id = 1
     */
    chapterId: number;
    /**
     * @generated from protobuf field: uint32 stage_id = 2
     */
    stageId: number;
}
/**
 * 退出选preparing阶段
 *
 * @generated from protobuf message messages.RequestLeaveChooseMap
 */
export interface RequestLeaveChooseMap {
}
/**
 * Ready 表示某个客户端在选卡界面切换准备就绪
 *
 * @generated from protobuf message messages.RequestReady
 */
export interface RequestReady {
    /**
     * @generated from protobuf field: bool isReady = 1
     */
    isReady: boolean;
}
/**
 * Loaded 表示某个客户端加载完毕
 *
 * @generated from protobuf message messages.RequestLoaded
 */
export interface RequestLoaded {
    /**
     * @generated from protobuf field: bool isLoaded = 1
     */
    isLoaded: boolean;
}
// ----------
// InGame 游戏中

/**
 * RequestBlank 用于心跳的空请求
 * 每一个“不发送具体请求”的逻辑帧都应该发此请求
 *
 * @generated from protobuf message messages.RequestBlank
 */
export interface RequestBlank {
    /**
     * 客户端需要把此帧插入的位置
     *
     * @generated from protobuf field: uint32 frame_id = 1
     */
    frameId: number;
    /**
     * 客户端上一次确认的帧
     *
     * @generated from protobuf field: uint32 ack_frame_id = 2
     */
    ackFrameId: number;
}
/**
 * RequestGridOperation 格子操作请求
 * 应该作为基类被其他请求继承
 *
 * @generated from protobuf message messages.RequestGridOperation
 */
export interface RequestGridOperation {
    /**
     * 使用 RequestBlank 作为基础消息
     * 这表示这是一个心跳请求，包含了必要的帧信息
     *
     * @generated from protobuf field: messages.RequestBlank base = 1
     */
    base?: RequestBlank;
    /**
     * 操作的格子列
     *
     * @generated from protobuf field: uint32 col = 2
     */
    col: number;
    /**
     * 操作的格子行
     *
     * @generated from protobuf field: uint32 row = 3
     */
    row: number;
    /**
     * 此操作应该在哪一帧时进行
     *
     * @generated from protobuf field: uint32 process_frame_id = 4
     */
    processFrameId: number;
}
/**
 * RequestCardPlant 卡片种植请求
 *
 * @generated from protobuf message messages.RequestCardPlant
 */
export interface RequestCardPlant {
    /**
     * 使用 RequestGridOperation 作为基础消息
     *
     * @generated from protobuf field: messages.RequestGridOperation base = 1
     */
    base?: RequestGridOperation;
    /**
     * 卡片 ID
     *
     * @generated from protobuf field: uint32 pid = 2
     */
    pid: number;
    /**
     * 卡片等级
     *
     * @generated from protobuf field: uint32 level = 3
     */
    level: number;
    /**
     * 此次操作带来的消耗
     * 消耗性将在得到响应前直接扣除
     * 只有在得到服务器说，此次操作失败才会返还
     *
     * @generated from protobuf field: int32 cost = 4
     */
    cost: number;
    /**
     * 本次用户的阳光总数
     *
     * @generated from protobuf field: int32 EnergySum = 5
     */
    energySum: number;
    /**
     * 本次用户的星之碎片总数
     *
     * @generated from protobuf field: int32 StarShardsSum = 6
     */
    starShardsSum: number;
}
/**
 * RequestRemovePlant 铲除植物请求
 *
 * @generated from protobuf message messages.RequestRemovePlant
 */
export interface RequestRemovePlant {
    /**
     * 使用 RequestGridOperation 作为基础消息
     *
     * @generated from protobuf field: messages.RequestGridOperation base = 1
     */
    base?: RequestGridOperation;
    /**
     * 要铲除的植物 ID
     * 一个grid上有多个植物， 用植物的卡片id（非战局内实体id）
     *
     * @generated from protobuf field: uint32 pid = 2
     */
    pid: number;
}
/**
 * @generated from protobuf message messages.RequestStarShards
 */
export interface RequestStarShards {
    /**
     * 使用 RequestGridOperation 作为基础消息
     *
     * @generated from protobuf field: messages.RequestGridOperation base = 1
     */
    base?: RequestGridOperation;
    /**
     * 施加星之能力卡片 ID
     * 一个grid上有多个植物， 用植物的卡片id（非战局内实体id）
     *
     * @generated from protobuf field: uint32 pid = 2
     */
    pid: number;
    /**
     * 此次操作带来的消耗
     * 消耗性将在得到响应前直接扣除
     * 只有在得到服务器说，此次操作失败才会返还
     *
     * @generated from protobuf field: int32 cost = 3
     */
    cost: number;
    /**
     * 本次用户的阳光总数
     *
     * @generated from protobuf field: int32 EnergySum = 4
     */
    energySum: number;
    /**
     * 本次用户的星之碎片总数
     *
     * @generated from protobuf field: int32 StarShardsSum = 5
     */
    starShardsSum: number;
}
/**
 * 客户端本地游戏结束时告诉服务端
 *
 * @generated from protobuf message messages.RequestEndGame
 */
export interface RequestEndGame {
    /**
     * @generated from protobuf field: uint32 game_result = 1
     */
    gameResult: number; // 0: 失败, 1: 胜利
}
// @generated message type with reflection information, may provide speed optimized methods
class Request$Type extends MessageType<Request> {
    constructor() {
        super("messages.Request", [
            { no: 6, name: "choose_map", kind: "message", oneof: "payload", T: () => RequestChooseMap },
            { no: 9, name: "leave_choose_map", kind: "message", oneof: "payload", T: () => RequestLeaveChooseMap },
            { no: 5, name: "ready", kind: "message", oneof: "payload", T: () => RequestReady },
            { no: 8, name: "loaded", kind: "message", oneof: "payload", T: () => RequestLoaded },
            { no: 1, name: "blank", kind: "message", oneof: "payload", T: () => RequestBlank },
            { no: 2, name: "plant", kind: "message", oneof: "payload", T: () => RequestCardPlant },
            { no: 3, name: "remove_plant", kind: "message", oneof: "payload", T: () => RequestRemovePlant },
            { no: 4, name: "star_shards", kind: "message", oneof: "payload", T: () => RequestStarShards },
            { no: 7, name: "end_game", kind: "message", oneof: "payload", T: () => RequestEndGame }
        ]);
    }
    create(value?: PartialMessage<Request>): Request {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.payload = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Request>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request): Request {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* messages.RequestChooseMap choose_map */ 6:
                    message.payload = {
                        oneofKind: "chooseMap",
                        chooseMap: RequestChooseMap.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).chooseMap)
                    };
                    break;
                case /* messages.RequestLeaveChooseMap leave_choose_map */ 9:
                    message.payload = {
                        oneofKind: "leaveChooseMap",
                        leaveChooseMap: RequestLeaveChooseMap.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).leaveChooseMap)
                    };
                    break;
                case /* messages.RequestReady ready */ 5:
                    message.payload = {
                        oneofKind: "ready",
                        ready: RequestReady.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).ready)
                    };
                    break;
                case /* messages.RequestLoaded loaded */ 8:
                    message.payload = {
                        oneofKind: "loaded",
                        loaded: RequestLoaded.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).loaded)
                    };
                    break;
                case /* messages.RequestBlank blank */ 1:
                    message.payload = {
                        oneofKind: "blank",
                        blank: RequestBlank.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).blank)
                    };
                    break;
                case /* messages.RequestCardPlant plant */ 2:
                    message.payload = {
                        oneofKind: "plant",
                        plant: RequestCardPlant.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).plant)
                    };
                    break;
                case /* messages.RequestRemovePlant remove_plant */ 3:
                    message.payload = {
                        oneofKind: "removePlant",
                        removePlant: RequestRemovePlant.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).removePlant)
                    };
                    break;
                case /* messages.RequestStarShards star_shards */ 4:
                    message.payload = {
                        oneofKind: "starShards",
                        starShards: RequestStarShards.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).starShards)
                    };
                    break;
                case /* messages.RequestEndGame end_game */ 7:
                    message.payload = {
                        oneofKind: "endGame",
                        endGame: RequestEndGame.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).endGame)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* messages.RequestBlank blank = 1; */
        if (message.payload.oneofKind === "blank")
            RequestBlank.internalBinaryWrite(message.payload.blank, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* messages.RequestCardPlant plant = 2; */
        if (message.payload.oneofKind === "plant")
            RequestCardPlant.internalBinaryWrite(message.payload.plant, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* messages.RequestRemovePlant remove_plant = 3; */
        if (message.payload.oneofKind === "removePlant")
            RequestRemovePlant.internalBinaryWrite(message.payload.removePlant, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* messages.RequestStarShards star_shards = 4; */
        if (message.payload.oneofKind === "starShards")
            RequestStarShards.internalBinaryWrite(message.payload.starShards, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* messages.RequestReady ready = 5; */
        if (message.payload.oneofKind === "ready")
            RequestReady.internalBinaryWrite(message.payload.ready, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* messages.RequestChooseMap choose_map = 6; */
        if (message.payload.oneofKind === "chooseMap")
            RequestChooseMap.internalBinaryWrite(message.payload.chooseMap, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* messages.RequestEndGame end_game = 7; */
        if (message.payload.oneofKind === "endGame")
            RequestEndGame.internalBinaryWrite(message.payload.endGame, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* messages.RequestLoaded loaded = 8; */
        if (message.payload.oneofKind === "loaded")
            RequestLoaded.internalBinaryWrite(message.payload.loaded, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* messages.RequestLeaveChooseMap leave_choose_map = 9; */
        if (message.payload.oneofKind === "leaveChooseMap")
            RequestLeaveChooseMap.internalBinaryWrite(message.payload.leaveChooseMap, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.Request
 */
export const Request = new Request$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestChooseMap$Type extends MessageType<RequestChooseMap> {
    constructor() {
        super("messages.RequestChooseMap", [
            { no: 1, name: "chapter_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "stage_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RequestChooseMap>): RequestChooseMap {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chapterId = 0;
        message.stageId = 0;
        if (value !== undefined)
            reflectionMergePartial<RequestChooseMap>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestChooseMap): RequestChooseMap {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 chapter_id */ 1:
                    message.chapterId = reader.uint32();
                    break;
                case /* uint32 stage_id */ 2:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestChooseMap, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 chapter_id = 1; */
        if (message.chapterId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.chapterId);
        /* uint32 stage_id = 2; */
        if (message.stageId !== 0)
            writer.tag(2, WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.RequestChooseMap
 */
export const RequestChooseMap = new RequestChooseMap$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestLeaveChooseMap$Type extends MessageType<RequestLeaveChooseMap> {
    constructor() {
        super("messages.RequestLeaveChooseMap", []);
    }
    create(value?: PartialMessage<RequestLeaveChooseMap>): RequestLeaveChooseMap {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RequestLeaveChooseMap>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestLeaveChooseMap): RequestLeaveChooseMap {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestLeaveChooseMap, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.RequestLeaveChooseMap
 */
export const RequestLeaveChooseMap = new RequestLeaveChooseMap$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestReady$Type extends MessageType<RequestReady> {
    constructor() {
        super("messages.RequestReady", [
            { no: 1, name: "isReady", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RequestReady>): RequestReady {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.isReady = false;
        if (value !== undefined)
            reflectionMergePartial<RequestReady>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestReady): RequestReady {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool isReady */ 1:
                    message.isReady = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestReady, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool isReady = 1; */
        if (message.isReady !== false)
            writer.tag(1, WireType.Varint).bool(message.isReady);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.RequestReady
 */
export const RequestReady = new RequestReady$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestLoaded$Type extends MessageType<RequestLoaded> {
    constructor() {
        super("messages.RequestLoaded", [
            { no: 1, name: "isLoaded", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RequestLoaded>): RequestLoaded {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.isLoaded = false;
        if (value !== undefined)
            reflectionMergePartial<RequestLoaded>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestLoaded): RequestLoaded {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool isLoaded */ 1:
                    message.isLoaded = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestLoaded, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool isLoaded = 1; */
        if (message.isLoaded !== false)
            writer.tag(1, WireType.Varint).bool(message.isLoaded);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.RequestLoaded
 */
export const RequestLoaded = new RequestLoaded$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestBlank$Type extends MessageType<RequestBlank> {
    constructor() {
        super("messages.RequestBlank", [
            { no: 1, name: "frame_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "ack_frame_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RequestBlank>): RequestBlank {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.frameId = 0;
        message.ackFrameId = 0;
        if (value !== undefined)
            reflectionMergePartial<RequestBlank>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestBlank): RequestBlank {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 frame_id */ 1:
                    message.frameId = reader.uint32();
                    break;
                case /* uint32 ack_frame_id */ 2:
                    message.ackFrameId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestBlank, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 frame_id = 1; */
        if (message.frameId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.frameId);
        /* uint32 ack_frame_id = 2; */
        if (message.ackFrameId !== 0)
            writer.tag(2, WireType.Varint).uint32(message.ackFrameId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.RequestBlank
 */
export const RequestBlank = new RequestBlank$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestGridOperation$Type extends MessageType<RequestGridOperation> {
    constructor() {
        super("messages.RequestGridOperation", [
            { no: 1, name: "base", kind: "message", T: () => RequestBlank },
            { no: 2, name: "col", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "row", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "process_frame_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RequestGridOperation>): RequestGridOperation {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.col = 0;
        message.row = 0;
        message.processFrameId = 0;
        if (value !== undefined)
            reflectionMergePartial<RequestGridOperation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestGridOperation): RequestGridOperation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* messages.RequestBlank base */ 1:
                    message.base = RequestBlank.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                case /* uint32 col */ 2:
                    message.col = reader.uint32();
                    break;
                case /* uint32 row */ 3:
                    message.row = reader.uint32();
                    break;
                case /* uint32 process_frame_id */ 4:
                    message.processFrameId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestGridOperation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* messages.RequestBlank base = 1; */
        if (message.base)
            RequestBlank.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 col = 2; */
        if (message.col !== 0)
            writer.tag(2, WireType.Varint).uint32(message.col);
        /* uint32 row = 3; */
        if (message.row !== 0)
            writer.tag(3, WireType.Varint).uint32(message.row);
        /* uint32 process_frame_id = 4; */
        if (message.processFrameId !== 0)
            writer.tag(4, WireType.Varint).uint32(message.processFrameId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.RequestGridOperation
 */
export const RequestGridOperation = new RequestGridOperation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestCardPlant$Type extends MessageType<RequestCardPlant> {
    constructor() {
        super("messages.RequestCardPlant", [
            { no: 1, name: "base", kind: "message", T: () => RequestGridOperation },
            { no: 2, name: "pid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "level", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "cost", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "EnergySum", kind: "scalar", jsonName: "EnergySum", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "StarShardsSum", kind: "scalar", jsonName: "StarShardsSum", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RequestCardPlant>): RequestCardPlant {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pid = 0;
        message.level = 0;
        message.cost = 0;
        message.energySum = 0;
        message.starShardsSum = 0;
        if (value !== undefined)
            reflectionMergePartial<RequestCardPlant>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestCardPlant): RequestCardPlant {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* messages.RequestGridOperation base */ 1:
                    message.base = RequestGridOperation.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                case /* uint32 pid */ 2:
                    message.pid = reader.uint32();
                    break;
                case /* uint32 level */ 3:
                    message.level = reader.uint32();
                    break;
                case /* int32 cost */ 4:
                    message.cost = reader.int32();
                    break;
                case /* int32 EnergySum */ 5:
                    message.energySum = reader.int32();
                    break;
                case /* int32 StarShardsSum */ 6:
                    message.starShardsSum = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestCardPlant, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* messages.RequestGridOperation base = 1; */
        if (message.base)
            RequestGridOperation.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 pid = 2; */
        if (message.pid !== 0)
            writer.tag(2, WireType.Varint).uint32(message.pid);
        /* uint32 level = 3; */
        if (message.level !== 0)
            writer.tag(3, WireType.Varint).uint32(message.level);
        /* int32 cost = 4; */
        if (message.cost !== 0)
            writer.tag(4, WireType.Varint).int32(message.cost);
        /* int32 EnergySum = 5; */
        if (message.energySum !== 0)
            writer.tag(5, WireType.Varint).int32(message.energySum);
        /* int32 StarShardsSum = 6; */
        if (message.starShardsSum !== 0)
            writer.tag(6, WireType.Varint).int32(message.starShardsSum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.RequestCardPlant
 */
export const RequestCardPlant = new RequestCardPlant$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestRemovePlant$Type extends MessageType<RequestRemovePlant> {
    constructor() {
        super("messages.RequestRemovePlant", [
            { no: 1, name: "base", kind: "message", T: () => RequestGridOperation },
            { no: 2, name: "pid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RequestRemovePlant>): RequestRemovePlant {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pid = 0;
        if (value !== undefined)
            reflectionMergePartial<RequestRemovePlant>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestRemovePlant): RequestRemovePlant {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* messages.RequestGridOperation base */ 1:
                    message.base = RequestGridOperation.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                case /* uint32 pid */ 2:
                    message.pid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestRemovePlant, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* messages.RequestGridOperation base = 1; */
        if (message.base)
            RequestGridOperation.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 pid = 2; */
        if (message.pid !== 0)
            writer.tag(2, WireType.Varint).uint32(message.pid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.RequestRemovePlant
 */
export const RequestRemovePlant = new RequestRemovePlant$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestStarShards$Type extends MessageType<RequestStarShards> {
    constructor() {
        super("messages.RequestStarShards", [
            { no: 1, name: "base", kind: "message", T: () => RequestGridOperation },
            { no: 2, name: "pid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "cost", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "EnergySum", kind: "scalar", jsonName: "EnergySum", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "StarShardsSum", kind: "scalar", jsonName: "StarShardsSum", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RequestStarShards>): RequestStarShards {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pid = 0;
        message.cost = 0;
        message.energySum = 0;
        message.starShardsSum = 0;
        if (value !== undefined)
            reflectionMergePartial<RequestStarShards>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestStarShards): RequestStarShards {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* messages.RequestGridOperation base */ 1:
                    message.base = RequestGridOperation.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                case /* uint32 pid */ 2:
                    message.pid = reader.uint32();
                    break;
                case /* int32 cost */ 3:
                    message.cost = reader.int32();
                    break;
                case /* int32 EnergySum */ 4:
                    message.energySum = reader.int32();
                    break;
                case /* int32 StarShardsSum */ 5:
                    message.starShardsSum = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestStarShards, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* messages.RequestGridOperation base = 1; */
        if (message.base)
            RequestGridOperation.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 pid = 2; */
        if (message.pid !== 0)
            writer.tag(2, WireType.Varint).uint32(message.pid);
        /* int32 cost = 3; */
        if (message.cost !== 0)
            writer.tag(3, WireType.Varint).int32(message.cost);
        /* int32 EnergySum = 4; */
        if (message.energySum !== 0)
            writer.tag(4, WireType.Varint).int32(message.energySum);
        /* int32 StarShardsSum = 5; */
        if (message.starShardsSum !== 0)
            writer.tag(5, WireType.Varint).int32(message.starShardsSum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.RequestStarShards
 */
export const RequestStarShards = new RequestStarShards$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestEndGame$Type extends MessageType<RequestEndGame> {
    constructor() {
        super("messages.RequestEndGame", [
            { no: 1, name: "game_result", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RequestEndGame>): RequestEndGame {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.gameResult = 0;
        if (value !== undefined)
            reflectionMergePartial<RequestEndGame>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestEndGame): RequestEndGame {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 game_result */ 1:
                    message.gameResult = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestEndGame, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 game_result = 1; */
        if (message.gameResult !== 0)
            writer.tag(1, WireType.Varint).uint32(message.gameResult);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.RequestEndGame
 */
export const RequestEndGame = new RequestEndGame$Type();
