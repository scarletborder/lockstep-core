// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "response.proto" (package "messages", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * general
 *
 * @generated from protobuf message messages.ResponseErrorMessage
 */
export interface ResponseErrorMessage {
    /**
     * @generated from protobuf field: string message = 1
     */
    message: string;
}
/**
 * ----------
 * 大厅（房间外）
 * 在一次加入流程中只会有一个响应
 *
 * @generated from protobuf message messages.LobbyResponse
 */
export interface LobbyResponse {
    /**
     * @generated from protobuf oneof: payload
     */
    payload: {
        oneofKind: "joinRoomSuccess";
        /**
         * @generated from protobuf field: messages.ResponseJoinRoomSuccess join_room_success = 1
         */
        joinRoomSuccess: ResponseJoinRoomSuccess;
    } | {
        oneofKind: "joinRoomFailed";
        /**
         * @generated from protobuf field: messages.ResponseJoinRoomFailed join_room_failed = 2
         */
        joinRoomFailed: ResponseJoinRoomFailed;
    } | {
        oneofKind: undefined;
    };
}
/**
 * 加入房间失败
 *
 * @generated from protobuf message messages.ResponseJoinRoomFailed
 */
export interface ResponseJoinRoomFailed {
    /**
     * @generated from protobuf field: string message = 1
     */
    message: string; // 错误信息
}
/**
 * 加入房间成功
 *
 * @generated from protobuf message messages.ResponseJoinRoomSuccess
 */
export interface ResponseJoinRoomSuccess {
    /**
     * @generated from protobuf field: uint32 room_id = 1
     */
    roomId: number; // 房间 ID
    /**
     * @generated from protobuf field: uint32 my_id = 2
     */
    myId: number; // 我的 ID
    /**
     * @generated from protobuf field: string key = 4
     */
    key: string; // 房间密钥
    /**
     * @generated from protobuf field: string message = 5
     */
    message: string; // 成功信息
}
// ----------

/**
 * 房间（游戏外），包含所有可能的响应类型
 *
 * @generated from protobuf message messages.RoomResponse
 */
export interface RoomResponse {
    /**
     * @generated from protobuf oneof: payload
     */
    payload: {
        oneofKind: "roomInfo";
        /**
         * @generated from protobuf field: messages.ResponseRoomInfo room_info = 1
         */
        roomInfo: ResponseRoomInfo;
    } | {
        oneofKind: "chooseMap";
        /**
         * @generated from protobuf field: messages.ResponseChooseMap choose_map = 2
         */
        chooseMap: ResponseChooseMap;
    } | {
        oneofKind: "quitChooseMap";
        /**
         * @generated from protobuf field: messages.ResponseQuitChooseMap quit_choose_map = 9
         */
        quitChooseMap: ResponseQuitChooseMap; // 退出选卡阶段
    } | {
        oneofKind: "roomClosed";
        /**
         * @generated from protobuf field: messages.ResponseRoomClosed room_closed = 3
         */
        roomClosed: ResponseRoomClosed;
    } | {
        oneofKind: "gameEnd";
        /**
         * @generated from protobuf field: messages.ResponseGameEnd game_end = 8
         */
        gameEnd: ResponseGameEnd; // 游戏结束响应
    } | {
        oneofKind: "error";
        /**
         * @generated from protobuf field: messages.ResponseErrorMessage error = 4
         */
        error: ResponseErrorMessage;
    } | {
        oneofKind: "updateReadyCount";
        /**
         * @generated from protobuf field: messages.ResponseUpdateReadyCount update_ready_count = 5
         */
        updateReadyCount: ResponseUpdateReadyCount;
    } | {
        oneofKind: "allReady";
        /**
         * @generated from protobuf field: messages.ResponseAllReady all_ready = 6
         */
        allReady: ResponseAllReady; // 所有玩家准备完毕
    } | {
        oneofKind: "allLoaded";
        /**
         * @generated from protobuf field: messages.ResponseAllLoaded all_loaded = 7
         */
        allLoaded: ResponseAllLoaded;
    } | {
        oneofKind: undefined;
    };
}
/**
 * 客户端加入时通知的信息， 或者广播给所有客户端的信息
 *
 * @generated from protobuf message messages.ResponseRoomInfo
 */
export interface ResponseRoomInfo {
    /**
     * 房间 ID
     *
     * @generated from protobuf field: uint32 room_id = 1
     */
    roomId: number;
    /**
     * 房主 ID
     *
     * @generated from protobuf field: uint32 lord_id = 2
     */
    lordId: number;
    /**
     * 告诉客户端，你的id是什么
     *
     * @generated from protobuf field: uint32 my_id = 3
     */
    myId: number;
    /**
     * 房间内玩家情况
     * json 字段
     *
     * @generated from protobuf field: string peers = 4
     */
    peers: string;
}
/**
 * 已经选择了地图
 * 通知客户端进入选卡阶段
 *
 * @generated from protobuf message messages.ResponseChooseMap
 */
export interface ResponseChooseMap {
    /**
     * @generated from protobuf field: uint32 chapter_id = 1
     */
    chapterId: number;
    /**
     * @generated from protobuf field: uint32 stage_id = 2
     */
    stageId: number;
}
/**
 * 退出选卡阶段
 *
 * @generated from protobuf message messages.ResponseQuitChooseMap
 */
export interface ResponseQuitChooseMap {
}
/**
 * 更新已经准备的人数
 *
 * @generated from protobuf message messages.ResponseUpdateReadyCount
 */
export interface ResponseUpdateReadyCount {
    /**
     * @generated from protobuf field: uint32 count = 1
     */
    count: number; // 已经准备的人数
    /**
     * @generated from protobuf field: uint32 all_player_count = 2
     */
    allPlayerCount: number; // 房间内总人数
}
/**
 * 告知所有玩家， 所有玩家已经全部准备， 可以开始Load游戏
 *
 * @generated from protobuf message messages.ResponseAllReady
 */
export interface ResponseAllReady {
    /**
     * 房间内总人数
     *
     * @generated from protobuf field: uint32 all_player_count = 1
     */
    allPlayerCount: number;
}
/**
 * 告知所有玩家， 所有玩家已经loaded， 可以开始InGame游戏
 * 客户端接受后
 * 1. 做地图的特殊操作（比如预制植物）
 * 2. 置客户端的当前帧号为1
 * 3. 他们的下一次ack_id会是0
 * 服务端
 * 初始默认所有客户端都ack了0
 * 置 “发送给客户端的下一帧” 为1
 *
 * @generated from protobuf message messages.ResponseAllLoaded
 */
export interface ResponseAllLoaded {
    /**
     * seed 不可以是负数，用 int32
     *
     * @generated from protobuf field: int32 seed = 1
     */
    seed: number;
}
/**
 * 本局游戏结束（客户端要判断在InGame才会结算）
 *
 * @generated from protobuf message messages.ResponseGameEnd
 */
export interface ResponseGameEnd {
    /**
     * @generated from protobuf field: uint32 game_result = 1
     */
    gameResult: number;
}
/**
 * 房间关闭响应
 *
 * @generated from protobuf message messages.ResponseRoomClosed
 */
export interface ResponseRoomClosed {
    /**
     * @generated from protobuf field: string message = 1
     */
    message: string;
}
// ----------
// 游戏开始后操作
// ----------

/**
 * 游戏内，包含所有可能的响应类型
 * 客户端在接收到服务器帧后会解析list
 * 如果list中有operation， 并且uid是自己
 * 那么会根据此次响应的frame_id和客户端当前本地帧序号计算偏差
 * 未来会根据偏差来调整process_frame_id
 *
 * @generated from protobuf message messages.InGameResponse
 */
export interface InGameResponse {
    /**
     * 此帧序号， 从0起
     *
     * @generated from protobuf field: uint32 frame_id = 1
     */
    frameId: number;
    /**
     * 本帧所有转发给客户端的操作列表
     * 客户端需要自行提取， 未来的几帧中会做哪些操作
     *
     * @generated from protobuf field: repeated messages.InGameOperation operations = 2
     */
    operations: InGameOperation[];
}
/**
 * 游戏内单个操作的封装
 *
 * @generated from protobuf message messages.InGameOperation
 */
export interface InGameOperation {
    /**
     * 此操作应该在哪一帧时进行
     * 服务端转发的最小process_frame_id应该恰好等于服务端要求客户端渲染的下一frame_id
     * 服务端不会因为这个字段的原因而推迟此operation的转发
     * 而是尽职的立刻转发， 从而便于客户端计算自己的偏差
     *
     * @generated from protobuf field: uint32 process_frame_id = 1
     */
    processFrameId: number;
    /**
     * 此操作列表在帧中处理的序号，数字越小，越先处理
     *
     * @generated from protobuf field: uint32 operation_index = 2
     */
    operationIndex: number;
    /**
     * @generated from protobuf oneof: payload
     */
    payload: {
        oneofKind: "cardPlant";
        /**
         * @generated from protobuf field: messages.ResponseCardPlant card_plant = 3
         */
        cardPlant: ResponseCardPlant;
    } | {
        oneofKind: "removePlant";
        /**
         * @generated from protobuf field: messages.ResponseRemovePlant remove_plant = 4
         */
        removePlant: ResponseRemovePlant;
    } | {
        oneofKind: "useStarShards";
        /**
         * @generated from protobuf field: messages.ResponseUseStarShards use_star_shards = 5
         */
        useStarShards: ResponseUseStarShards;
    } | {
        oneofKind: "gameEvent";
        /**
         * @generated from protobuf field: messages.ResponseGameEvent game_event = 6
         */
        gameEvent: ResponseGameEvent;
    } | {
        oneofKind: "error";
        /**
         * @generated from protobuf field: messages.ResponseErrorMessage error = 7
         */
        error: ResponseErrorMessage;
    } | {
        oneofKind: undefined;
    };
}
/**
 * 格子操作
 *
 * @generated from protobuf message messages.ResponseGridOperation
 */
export interface ResponseGridOperation {
    /**
     * 操作者
     *
     * @generated from protobuf field: uint32 uid = 1
     */
    uid: number;
    /**
     * 操作的格子列
     *
     * @generated from protobuf field: uint32 col = 2
     */
    col: number;
    /**
     * 操作的格子行
     *
     * @generated from protobuf field: uint32 row = 3
     */
    row: number;
}
/**
 * 广播卡牌种植
 *
 * @generated from protobuf message messages.ResponseCardPlant
 */
export interface ResponseCardPlant {
    /**
     * @generated from protobuf field: uint32 pid = 1
     */
    pid: number;
    /**
     * @generated from protobuf field: uint32 level = 2
     */
    level: number;
    /**
     * 消耗
     *
     * @generated from protobuf field: int32 cost = 3
     */
    cost: number;
    /**
     * @generated from protobuf field: messages.ResponseGridOperation base = 5
     */
    base?: ResponseGridOperation;
}
/**
 * @generated from protobuf message messages.ResponseRemovePlant
 */
export interface ResponseRemovePlant {
    /**
     * 使用 ResponseGridOperation 作为基础消息
     *
     * @generated from protobuf field: messages.ResponseGridOperation base = 1
     */
    base?: ResponseGridOperation;
    /**
     * @generated from protobuf field: uint32 pid = 2
     */
    pid: number;
}
/**
 * @generated from protobuf message messages.ResponseUseStarShards
 */
export interface ResponseUseStarShards {
    /**
     * @generated from protobuf field: uint32 pid = 1
     */
    pid: number;
    /**
     * 消耗
     *
     * @generated from protobuf field: int32 cost = 2
     */
    cost: number;
    /**
     * @generated from protobuf field: messages.ResponseGridOperation base = 4
     */
    base?: ResponseGridOperation;
}
/**
 * @generated from protobuf message messages.ResponseGameEvent
 */
export interface ResponseGameEvent {
    /**
     * 事件类型
     * 0x4000 - 0x4FFF 为本地游戏事件
     *
     * @generated from protobuf field: uint32 event_type = 1
     */
    eventType: number;
    /**
     * 事件base64,自行解析
     *
     * @generated from protobuf field: string message = 2
     */
    message: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class ResponseErrorMessage$Type extends MessageType<ResponseErrorMessage> {
    constructor() {
        super("messages.ResponseErrorMessage", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResponseErrorMessage>): ResponseErrorMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<ResponseErrorMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseErrorMessage): ResponseErrorMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResponseErrorMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.ResponseErrorMessage
 */
export const ResponseErrorMessage = new ResponseErrorMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LobbyResponse$Type extends MessageType<LobbyResponse> {
    constructor() {
        super("messages.LobbyResponse", [
            { no: 1, name: "join_room_success", kind: "message", oneof: "payload", T: () => ResponseJoinRoomSuccess },
            { no: 2, name: "join_room_failed", kind: "message", oneof: "payload", T: () => ResponseJoinRoomFailed }
        ]);
    }
    create(value?: PartialMessage<LobbyResponse>): LobbyResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.payload = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<LobbyResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LobbyResponse): LobbyResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* messages.ResponseJoinRoomSuccess join_room_success */ 1:
                    message.payload = {
                        oneofKind: "joinRoomSuccess",
                        joinRoomSuccess: ResponseJoinRoomSuccess.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).joinRoomSuccess)
                    };
                    break;
                case /* messages.ResponseJoinRoomFailed join_room_failed */ 2:
                    message.payload = {
                        oneofKind: "joinRoomFailed",
                        joinRoomFailed: ResponseJoinRoomFailed.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).joinRoomFailed)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LobbyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* messages.ResponseJoinRoomSuccess join_room_success = 1; */
        if (message.payload.oneofKind === "joinRoomSuccess")
            ResponseJoinRoomSuccess.internalBinaryWrite(message.payload.joinRoomSuccess, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* messages.ResponseJoinRoomFailed join_room_failed = 2; */
        if (message.payload.oneofKind === "joinRoomFailed")
            ResponseJoinRoomFailed.internalBinaryWrite(message.payload.joinRoomFailed, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.LobbyResponse
 */
export const LobbyResponse = new LobbyResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseJoinRoomFailed$Type extends MessageType<ResponseJoinRoomFailed> {
    constructor() {
        super("messages.ResponseJoinRoomFailed", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResponseJoinRoomFailed>): ResponseJoinRoomFailed {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<ResponseJoinRoomFailed>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseJoinRoomFailed): ResponseJoinRoomFailed {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResponseJoinRoomFailed, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.ResponseJoinRoomFailed
 */
export const ResponseJoinRoomFailed = new ResponseJoinRoomFailed$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseJoinRoomSuccess$Type extends MessageType<ResponseJoinRoomSuccess> {
    constructor() {
        super("messages.ResponseJoinRoomSuccess", [
            { no: 1, name: "room_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "my_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResponseJoinRoomSuccess>): ResponseJoinRoomSuccess {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roomId = 0;
        message.myId = 0;
        message.key = "";
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<ResponseJoinRoomSuccess>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseJoinRoomSuccess): ResponseJoinRoomSuccess {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 room_id */ 1:
                    message.roomId = reader.uint32();
                    break;
                case /* uint32 my_id */ 2:
                    message.myId = reader.uint32();
                    break;
                case /* string key */ 4:
                    message.key = reader.string();
                    break;
                case /* string message */ 5:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResponseJoinRoomSuccess, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 room_id = 1; */
        if (message.roomId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.roomId);
        /* uint32 my_id = 2; */
        if (message.myId !== 0)
            writer.tag(2, WireType.Varint).uint32(message.myId);
        /* string key = 4; */
        if (message.key !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.key);
        /* string message = 5; */
        if (message.message !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.ResponseJoinRoomSuccess
 */
export const ResponseJoinRoomSuccess = new ResponseJoinRoomSuccess$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomResponse$Type extends MessageType<RoomResponse> {
    constructor() {
        super("messages.RoomResponse", [
            { no: 1, name: "room_info", kind: "message", oneof: "payload", T: () => ResponseRoomInfo },
            { no: 2, name: "choose_map", kind: "message", oneof: "payload", T: () => ResponseChooseMap },
            { no: 9, name: "quit_choose_map", kind: "message", oneof: "payload", T: () => ResponseQuitChooseMap },
            { no: 3, name: "room_closed", kind: "message", oneof: "payload", T: () => ResponseRoomClosed },
            { no: 8, name: "game_end", kind: "message", oneof: "payload", T: () => ResponseGameEnd },
            { no: 4, name: "error", kind: "message", oneof: "payload", T: () => ResponseErrorMessage },
            { no: 5, name: "update_ready_count", kind: "message", oneof: "payload", T: () => ResponseUpdateReadyCount },
            { no: 6, name: "all_ready", kind: "message", oneof: "payload", T: () => ResponseAllReady },
            { no: 7, name: "all_loaded", kind: "message", oneof: "payload", T: () => ResponseAllLoaded }
        ]);
    }
    create(value?: PartialMessage<RoomResponse>): RoomResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.payload = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<RoomResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomResponse): RoomResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* messages.ResponseRoomInfo room_info */ 1:
                    message.payload = {
                        oneofKind: "roomInfo",
                        roomInfo: ResponseRoomInfo.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).roomInfo)
                    };
                    break;
                case /* messages.ResponseChooseMap choose_map */ 2:
                    message.payload = {
                        oneofKind: "chooseMap",
                        chooseMap: ResponseChooseMap.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).chooseMap)
                    };
                    break;
                case /* messages.ResponseQuitChooseMap quit_choose_map */ 9:
                    message.payload = {
                        oneofKind: "quitChooseMap",
                        quitChooseMap: ResponseQuitChooseMap.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).quitChooseMap)
                    };
                    break;
                case /* messages.ResponseRoomClosed room_closed */ 3:
                    message.payload = {
                        oneofKind: "roomClosed",
                        roomClosed: ResponseRoomClosed.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).roomClosed)
                    };
                    break;
                case /* messages.ResponseGameEnd game_end */ 8:
                    message.payload = {
                        oneofKind: "gameEnd",
                        gameEnd: ResponseGameEnd.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).gameEnd)
                    };
                    break;
                case /* messages.ResponseErrorMessage error */ 4:
                    message.payload = {
                        oneofKind: "error",
                        error: ResponseErrorMessage.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).error)
                    };
                    break;
                case /* messages.ResponseUpdateReadyCount update_ready_count */ 5:
                    message.payload = {
                        oneofKind: "updateReadyCount",
                        updateReadyCount: ResponseUpdateReadyCount.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).updateReadyCount)
                    };
                    break;
                case /* messages.ResponseAllReady all_ready */ 6:
                    message.payload = {
                        oneofKind: "allReady",
                        allReady: ResponseAllReady.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).allReady)
                    };
                    break;
                case /* messages.ResponseAllLoaded all_loaded */ 7:
                    message.payload = {
                        oneofKind: "allLoaded",
                        allLoaded: ResponseAllLoaded.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).allLoaded)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* messages.ResponseRoomInfo room_info = 1; */
        if (message.payload.oneofKind === "roomInfo")
            ResponseRoomInfo.internalBinaryWrite(message.payload.roomInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* messages.ResponseChooseMap choose_map = 2; */
        if (message.payload.oneofKind === "chooseMap")
            ResponseChooseMap.internalBinaryWrite(message.payload.chooseMap, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* messages.ResponseRoomClosed room_closed = 3; */
        if (message.payload.oneofKind === "roomClosed")
            ResponseRoomClosed.internalBinaryWrite(message.payload.roomClosed, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* messages.ResponseErrorMessage error = 4; */
        if (message.payload.oneofKind === "error")
            ResponseErrorMessage.internalBinaryWrite(message.payload.error, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* messages.ResponseUpdateReadyCount update_ready_count = 5; */
        if (message.payload.oneofKind === "updateReadyCount")
            ResponseUpdateReadyCount.internalBinaryWrite(message.payload.updateReadyCount, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* messages.ResponseAllReady all_ready = 6; */
        if (message.payload.oneofKind === "allReady")
            ResponseAllReady.internalBinaryWrite(message.payload.allReady, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* messages.ResponseAllLoaded all_loaded = 7; */
        if (message.payload.oneofKind === "allLoaded")
            ResponseAllLoaded.internalBinaryWrite(message.payload.allLoaded, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* messages.ResponseGameEnd game_end = 8; */
        if (message.payload.oneofKind === "gameEnd")
            ResponseGameEnd.internalBinaryWrite(message.payload.gameEnd, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* messages.ResponseQuitChooseMap quit_choose_map = 9; */
        if (message.payload.oneofKind === "quitChooseMap")
            ResponseQuitChooseMap.internalBinaryWrite(message.payload.quitChooseMap, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.RoomResponse
 */
export const RoomResponse = new RoomResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseRoomInfo$Type extends MessageType<ResponseRoomInfo> {
    constructor() {
        super("messages.ResponseRoomInfo", [
            { no: 1, name: "room_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "lord_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "my_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "peers", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResponseRoomInfo>): ResponseRoomInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roomId = 0;
        message.lordId = 0;
        message.myId = 0;
        message.peers = "";
        if (value !== undefined)
            reflectionMergePartial<ResponseRoomInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseRoomInfo): ResponseRoomInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 room_id */ 1:
                    message.roomId = reader.uint32();
                    break;
                case /* uint32 lord_id */ 2:
                    message.lordId = reader.uint32();
                    break;
                case /* uint32 my_id */ 3:
                    message.myId = reader.uint32();
                    break;
                case /* string peers */ 4:
                    message.peers = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResponseRoomInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 room_id = 1; */
        if (message.roomId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.roomId);
        /* uint32 lord_id = 2; */
        if (message.lordId !== 0)
            writer.tag(2, WireType.Varint).uint32(message.lordId);
        /* uint32 my_id = 3; */
        if (message.myId !== 0)
            writer.tag(3, WireType.Varint).uint32(message.myId);
        /* string peers = 4; */
        if (message.peers !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.peers);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.ResponseRoomInfo
 */
export const ResponseRoomInfo = new ResponseRoomInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseChooseMap$Type extends MessageType<ResponseChooseMap> {
    constructor() {
        super("messages.ResponseChooseMap", [
            { no: 1, name: "chapter_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "stage_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ResponseChooseMap>): ResponseChooseMap {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chapterId = 0;
        message.stageId = 0;
        if (value !== undefined)
            reflectionMergePartial<ResponseChooseMap>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseChooseMap): ResponseChooseMap {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 chapter_id */ 1:
                    message.chapterId = reader.uint32();
                    break;
                case /* uint32 stage_id */ 2:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResponseChooseMap, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 chapter_id = 1; */
        if (message.chapterId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.chapterId);
        /* uint32 stage_id = 2; */
        if (message.stageId !== 0)
            writer.tag(2, WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.ResponseChooseMap
 */
export const ResponseChooseMap = new ResponseChooseMap$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseQuitChooseMap$Type extends MessageType<ResponseQuitChooseMap> {
    constructor() {
        super("messages.ResponseQuitChooseMap", []);
    }
    create(value?: PartialMessage<ResponseQuitChooseMap>): ResponseQuitChooseMap {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResponseQuitChooseMap>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseQuitChooseMap): ResponseQuitChooseMap {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResponseQuitChooseMap, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.ResponseQuitChooseMap
 */
export const ResponseQuitChooseMap = new ResponseQuitChooseMap$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseUpdateReadyCount$Type extends MessageType<ResponseUpdateReadyCount> {
    constructor() {
        super("messages.ResponseUpdateReadyCount", [
            { no: 1, name: "count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "all_player_count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ResponseUpdateReadyCount>): ResponseUpdateReadyCount {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.count = 0;
        message.allPlayerCount = 0;
        if (value !== undefined)
            reflectionMergePartial<ResponseUpdateReadyCount>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseUpdateReadyCount): ResponseUpdateReadyCount {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 count */ 1:
                    message.count = reader.uint32();
                    break;
                case /* uint32 all_player_count */ 2:
                    message.allPlayerCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResponseUpdateReadyCount, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 count = 1; */
        if (message.count !== 0)
            writer.tag(1, WireType.Varint).uint32(message.count);
        /* uint32 all_player_count = 2; */
        if (message.allPlayerCount !== 0)
            writer.tag(2, WireType.Varint).uint32(message.allPlayerCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.ResponseUpdateReadyCount
 */
export const ResponseUpdateReadyCount = new ResponseUpdateReadyCount$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseAllReady$Type extends MessageType<ResponseAllReady> {
    constructor() {
        super("messages.ResponseAllReady", [
            { no: 1, name: "all_player_count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ResponseAllReady>): ResponseAllReady {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.allPlayerCount = 0;
        if (value !== undefined)
            reflectionMergePartial<ResponseAllReady>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseAllReady): ResponseAllReady {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 all_player_count */ 1:
                    message.allPlayerCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResponseAllReady, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 all_player_count = 1; */
        if (message.allPlayerCount !== 0)
            writer.tag(1, WireType.Varint).uint32(message.allPlayerCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.ResponseAllReady
 */
export const ResponseAllReady = new ResponseAllReady$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseAllLoaded$Type extends MessageType<ResponseAllLoaded> {
    constructor() {
        super("messages.ResponseAllLoaded", [
            { no: 1, name: "seed", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ResponseAllLoaded>): ResponseAllLoaded {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.seed = 0;
        if (value !== undefined)
            reflectionMergePartial<ResponseAllLoaded>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseAllLoaded): ResponseAllLoaded {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 seed */ 1:
                    message.seed = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResponseAllLoaded, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 seed = 1; */
        if (message.seed !== 0)
            writer.tag(1, WireType.Varint).int32(message.seed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.ResponseAllLoaded
 */
export const ResponseAllLoaded = new ResponseAllLoaded$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseGameEnd$Type extends MessageType<ResponseGameEnd> {
    constructor() {
        super("messages.ResponseGameEnd", [
            { no: 1, name: "game_result", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ResponseGameEnd>): ResponseGameEnd {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.gameResult = 0;
        if (value !== undefined)
            reflectionMergePartial<ResponseGameEnd>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseGameEnd): ResponseGameEnd {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 game_result */ 1:
                    message.gameResult = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResponseGameEnd, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 game_result = 1; */
        if (message.gameResult !== 0)
            writer.tag(1, WireType.Varint).uint32(message.gameResult);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.ResponseGameEnd
 */
export const ResponseGameEnd = new ResponseGameEnd$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseRoomClosed$Type extends MessageType<ResponseRoomClosed> {
    constructor() {
        super("messages.ResponseRoomClosed", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResponseRoomClosed>): ResponseRoomClosed {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<ResponseRoomClosed>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseRoomClosed): ResponseRoomClosed {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResponseRoomClosed, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.ResponseRoomClosed
 */
export const ResponseRoomClosed = new ResponseRoomClosed$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InGameResponse$Type extends MessageType<InGameResponse> {
    constructor() {
        super("messages.InGameResponse", [
            { no: 1, name: "frame_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "operations", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => InGameOperation }
        ]);
    }
    create(value?: PartialMessage<InGameResponse>): InGameResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.frameId = 0;
        message.operations = [];
        if (value !== undefined)
            reflectionMergePartial<InGameResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InGameResponse): InGameResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 frame_id */ 1:
                    message.frameId = reader.uint32();
                    break;
                case /* repeated messages.InGameOperation operations */ 2:
                    message.operations.push(InGameOperation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InGameResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 frame_id = 1; */
        if (message.frameId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.frameId);
        /* repeated messages.InGameOperation operations = 2; */
        for (let i = 0; i < message.operations.length; i++)
            InGameOperation.internalBinaryWrite(message.operations[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.InGameResponse
 */
export const InGameResponse = new InGameResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InGameOperation$Type extends MessageType<InGameOperation> {
    constructor() {
        super("messages.InGameOperation", [
            { no: 1, name: "process_frame_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "operation_index", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "card_plant", kind: "message", oneof: "payload", T: () => ResponseCardPlant },
            { no: 4, name: "remove_plant", kind: "message", oneof: "payload", T: () => ResponseRemovePlant },
            { no: 5, name: "use_star_shards", kind: "message", oneof: "payload", T: () => ResponseUseStarShards },
            { no: 6, name: "game_event", kind: "message", oneof: "payload", T: () => ResponseGameEvent },
            { no: 7, name: "error", kind: "message", oneof: "payload", T: () => ResponseErrorMessage }
        ]);
    }
    create(value?: PartialMessage<InGameOperation>): InGameOperation {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.processFrameId = 0;
        message.operationIndex = 0;
        message.payload = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<InGameOperation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InGameOperation): InGameOperation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 process_frame_id */ 1:
                    message.processFrameId = reader.uint32();
                    break;
                case /* uint32 operation_index */ 2:
                    message.operationIndex = reader.uint32();
                    break;
                case /* messages.ResponseCardPlant card_plant */ 3:
                    message.payload = {
                        oneofKind: "cardPlant",
                        cardPlant: ResponseCardPlant.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).cardPlant)
                    };
                    break;
                case /* messages.ResponseRemovePlant remove_plant */ 4:
                    message.payload = {
                        oneofKind: "removePlant",
                        removePlant: ResponseRemovePlant.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).removePlant)
                    };
                    break;
                case /* messages.ResponseUseStarShards use_star_shards */ 5:
                    message.payload = {
                        oneofKind: "useStarShards",
                        useStarShards: ResponseUseStarShards.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).useStarShards)
                    };
                    break;
                case /* messages.ResponseGameEvent game_event */ 6:
                    message.payload = {
                        oneofKind: "gameEvent",
                        gameEvent: ResponseGameEvent.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).gameEvent)
                    };
                    break;
                case /* messages.ResponseErrorMessage error */ 7:
                    message.payload = {
                        oneofKind: "error",
                        error: ResponseErrorMessage.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).error)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InGameOperation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 process_frame_id = 1; */
        if (message.processFrameId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.processFrameId);
        /* uint32 operation_index = 2; */
        if (message.operationIndex !== 0)
            writer.tag(2, WireType.Varint).uint32(message.operationIndex);
        /* messages.ResponseCardPlant card_plant = 3; */
        if (message.payload.oneofKind === "cardPlant")
            ResponseCardPlant.internalBinaryWrite(message.payload.cardPlant, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* messages.ResponseRemovePlant remove_plant = 4; */
        if (message.payload.oneofKind === "removePlant")
            ResponseRemovePlant.internalBinaryWrite(message.payload.removePlant, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* messages.ResponseUseStarShards use_star_shards = 5; */
        if (message.payload.oneofKind === "useStarShards")
            ResponseUseStarShards.internalBinaryWrite(message.payload.useStarShards, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* messages.ResponseGameEvent game_event = 6; */
        if (message.payload.oneofKind === "gameEvent")
            ResponseGameEvent.internalBinaryWrite(message.payload.gameEvent, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* messages.ResponseErrorMessage error = 7; */
        if (message.payload.oneofKind === "error")
            ResponseErrorMessage.internalBinaryWrite(message.payload.error, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.InGameOperation
 */
export const InGameOperation = new InGameOperation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseGridOperation$Type extends MessageType<ResponseGridOperation> {
    constructor() {
        super("messages.ResponseGridOperation", [
            { no: 1, name: "uid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "col", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "row", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ResponseGridOperation>): ResponseGridOperation {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uid = 0;
        message.col = 0;
        message.row = 0;
        if (value !== undefined)
            reflectionMergePartial<ResponseGridOperation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseGridOperation): ResponseGridOperation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 uid */ 1:
                    message.uid = reader.uint32();
                    break;
                case /* uint32 col */ 2:
                    message.col = reader.uint32();
                    break;
                case /* uint32 row */ 3:
                    message.row = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResponseGridOperation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 uid = 1; */
        if (message.uid !== 0)
            writer.tag(1, WireType.Varint).uint32(message.uid);
        /* uint32 col = 2; */
        if (message.col !== 0)
            writer.tag(2, WireType.Varint).uint32(message.col);
        /* uint32 row = 3; */
        if (message.row !== 0)
            writer.tag(3, WireType.Varint).uint32(message.row);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.ResponseGridOperation
 */
export const ResponseGridOperation = new ResponseGridOperation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseCardPlant$Type extends MessageType<ResponseCardPlant> {
    constructor() {
        super("messages.ResponseCardPlant", [
            { no: 1, name: "pid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "level", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "cost", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "base", kind: "message", T: () => ResponseGridOperation }
        ]);
    }
    create(value?: PartialMessage<ResponseCardPlant>): ResponseCardPlant {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pid = 0;
        message.level = 0;
        message.cost = 0;
        if (value !== undefined)
            reflectionMergePartial<ResponseCardPlant>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseCardPlant): ResponseCardPlant {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 pid */ 1:
                    message.pid = reader.uint32();
                    break;
                case /* uint32 level */ 2:
                    message.level = reader.uint32();
                    break;
                case /* int32 cost */ 3:
                    message.cost = reader.int32();
                    break;
                case /* messages.ResponseGridOperation base */ 5:
                    message.base = ResponseGridOperation.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResponseCardPlant, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 pid = 1; */
        if (message.pid !== 0)
            writer.tag(1, WireType.Varint).uint32(message.pid);
        /* uint32 level = 2; */
        if (message.level !== 0)
            writer.tag(2, WireType.Varint).uint32(message.level);
        /* int32 cost = 3; */
        if (message.cost !== 0)
            writer.tag(3, WireType.Varint).int32(message.cost);
        /* messages.ResponseGridOperation base = 5; */
        if (message.base)
            ResponseGridOperation.internalBinaryWrite(message.base, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.ResponseCardPlant
 */
export const ResponseCardPlant = new ResponseCardPlant$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseRemovePlant$Type extends MessageType<ResponseRemovePlant> {
    constructor() {
        super("messages.ResponseRemovePlant", [
            { no: 1, name: "base", kind: "message", T: () => ResponseGridOperation },
            { no: 2, name: "pid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ResponseRemovePlant>): ResponseRemovePlant {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pid = 0;
        if (value !== undefined)
            reflectionMergePartial<ResponseRemovePlant>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseRemovePlant): ResponseRemovePlant {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* messages.ResponseGridOperation base */ 1:
                    message.base = ResponseGridOperation.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                case /* uint32 pid */ 2:
                    message.pid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResponseRemovePlant, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* messages.ResponseGridOperation base = 1; */
        if (message.base)
            ResponseGridOperation.internalBinaryWrite(message.base, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 pid = 2; */
        if (message.pid !== 0)
            writer.tag(2, WireType.Varint).uint32(message.pid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.ResponseRemovePlant
 */
export const ResponseRemovePlant = new ResponseRemovePlant$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseUseStarShards$Type extends MessageType<ResponseUseStarShards> {
    constructor() {
        super("messages.ResponseUseStarShards", [
            { no: 1, name: "pid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "cost", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "base", kind: "message", T: () => ResponseGridOperation }
        ]);
    }
    create(value?: PartialMessage<ResponseUseStarShards>): ResponseUseStarShards {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pid = 0;
        message.cost = 0;
        if (value !== undefined)
            reflectionMergePartial<ResponseUseStarShards>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseUseStarShards): ResponseUseStarShards {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 pid */ 1:
                    message.pid = reader.uint32();
                    break;
                case /* int32 cost */ 2:
                    message.cost = reader.int32();
                    break;
                case /* messages.ResponseGridOperation base */ 4:
                    message.base = ResponseGridOperation.internalBinaryRead(reader, reader.uint32(), options, message.base);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResponseUseStarShards, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 pid = 1; */
        if (message.pid !== 0)
            writer.tag(1, WireType.Varint).uint32(message.pid);
        /* int32 cost = 2; */
        if (message.cost !== 0)
            writer.tag(2, WireType.Varint).int32(message.cost);
        /* messages.ResponseGridOperation base = 4; */
        if (message.base)
            ResponseGridOperation.internalBinaryWrite(message.base, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.ResponseUseStarShards
 */
export const ResponseUseStarShards = new ResponseUseStarShards$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseGameEvent$Type extends MessageType<ResponseGameEvent> {
    constructor() {
        super("messages.ResponseGameEvent", [
            { no: 1, name: "event_type", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResponseGameEvent>): ResponseGameEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.eventType = 0;
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<ResponseGameEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseGameEvent): ResponseGameEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 event_type */ 1:
                    message.eventType = reader.uint32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResponseGameEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 event_type = 1; */
        if (message.eventType !== 0)
            writer.tag(1, WireType.Varint).uint32(message.eventType);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message messages.ResponseGameEvent
 */
export const ResponseGameEvent = new ResponseGameEvent$Type();
