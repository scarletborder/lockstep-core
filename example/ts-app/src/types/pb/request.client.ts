// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "request.proto" (package "messages", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { LockstepService } from "./request";
import type { HealthCheckResponse } from "./request";
import type { CreateRoomResponse } from "./request";
import type { CreateRoomRequest } from "./request";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListRoomsResponse } from "./request";
import type { Empty } from "./google/protobuf/empty";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * 服务定义
 * 定义 Lockstep 服务的 RPC 方法
 *
 * @generated from protobuf service messages.LockstepService
 */
export interface ILockstepServiceClient {
    /**
     * 列出所有房间
     * 返回包含所有可用房间ID的响应
     *
     * @generated from protobuf rpc: ListRooms
     */
    listRooms(input: Empty, options?: RpcOptions): UnaryCall<Empty, ListRoomsResponse>;
    /**
     * 创建新房间
     * 接受房间名称和密钥，返回新创建房间的ID
     *
     * @generated from protobuf rpc: CreateRoom
     */
    createRoom(input: CreateRoomRequest, options?: RpcOptions): UnaryCall<CreateRoomRequest, CreateRoomResponse>;
    // 通过双向流加入房间
    // 接受房间ID和可选密钥，升级到WebTransport连接
    // 此方法请使用原生http库实现
    // rpc JoinRoomRPC(JoinRoomRequest) returns (google.protobuf.Empty);

    /**
     * 健康检查
     * 返回服务器状态和可用端点信息
     *
     * @generated from protobuf rpc: HealthCheck
     */
    healthCheck(input: Empty, options?: RpcOptions): UnaryCall<Empty, HealthCheckResponse>;
}
/**
 * 服务定义
 * 定义 Lockstep 服务的 RPC 方法
 *
 * @generated from protobuf service messages.LockstepService
 */
export class LockstepServiceClient implements ILockstepServiceClient, ServiceInfo {
    typeName = LockstepService.typeName;
    methods = LockstepService.methods;
    options = LockstepService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * 列出所有房间
     * 返回包含所有可用房间ID的响应
     *
     * @generated from protobuf rpc: ListRooms
     */
    listRooms(input: Empty, options?: RpcOptions): UnaryCall<Empty, ListRoomsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, ListRoomsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * 创建新房间
     * 接受房间名称和密钥，返回新创建房间的ID
     *
     * @generated from protobuf rpc: CreateRoom
     */
    createRoom(input: CreateRoomRequest, options?: RpcOptions): UnaryCall<CreateRoomRequest, CreateRoomResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateRoomRequest, CreateRoomResponse>("unary", this._transport, method, opt, input);
    }
    // 通过双向流加入房间
    // 接受房间ID和可选密钥，升级到WebTransport连接
    // 此方法请使用原生http库实现
    // rpc JoinRoomRPC(JoinRoomRequest) returns (google.protobuf.Empty);

    /**
     * 健康检查
     * 返回服务器状态和可用端点信息
     *
     * @generated from protobuf rpc: HealthCheck
     */
    healthCheck(input: Empty, options?: RpcOptions): UnaryCall<Empty, HealthCheckResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, HealthCheckResponse>("unary", this._transport, method, opt, input);
    }
}
